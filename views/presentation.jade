script(src='/socket.io/socket.io.js')
script(src='/javascripts/jquery-1.6.1.min.js')
script(type='text/javascript')
  $(function(){
    if (typeof console === 'undefined' || typeof console.log === 'undefined') {
      window.console = {log : function(msg){}};
    }
    var valOf = {
          uname : '#{uname}',
          avatar: '#{avatar}',
          port  : #{port},
          pId   : '#{p_id}',
          good  : 'Good',
          nG    : '!Good',
          ask   : 'Ask'
        },
        emotionOf = {
          '*'     : {'imgNm':'all' , 'cnt' : #{allCnt},  'pageCnt':#{allPageCnt},  'id':'#allList',  listNode:'', 'isLoad':false},
          'Good'  : {'imgNm':'good', 'cnt' : #{goodCnt}, 'pageCnt':#{goodPageCnt}, 'id':'#goodList', listNode:'', 'isLoad':false},
          '!Good' : {'imgNm':'ng' ,  'cnt' : #{ngCnt},   'pageCnt':#{ngPageCnt},   'id':'#ngList',   listNode:'', 'isLoad':false},
          'Ask'   : {'imgNm':'ask' , 'cnt' : #{askCnt},  'pageCnt':#{askPageCnt},  'id':'#askList',  listNode:'', 'isLoad':false}
        },
        worker,sessionId,timeoutObject,loading,
        offsetTime = #{serverTime},
        commentBox =  '<li data-emotion="{{emotion}}" > '+
                      '  <div class="emotion"><img width="50px" height="50px" src="/images/{{imgFileNm}}.png"/></div> '+
                      '  <div class="comment-body"> '+
                      '   <p>{{body}}</p> '+
                      '   <small>by <em>{{name}}</em> <img src="{{avatar}}" height="15" width="15" /> on <time data-timestamp="{{date}}">{{timeString}}</time></small> '+
                      '  </div> '+
                      '</li>';
    /* Below there are functions */
    var compileTempl = function(data){
      var templ = commentBox;
      $.each(data,function(key,value){
        if(typeof value === 'object'){
          templ = compileTempl(value);
        }else{
          templ = templ.replace(new RegExp("\\{\\{" + key + "\\}\\}","gi"),value);
        }
      });
      return templ;
    },
    
    changeTimeString = function(now, createdTimestamp){
      var second = Math.round(((now-createdTimestamp)+offsetTime)/1000);
      if(second <= 5){
        return 'now';
      }else if(second <= 60){
        return second+' seconds ago';
      }else if(second < (60*60)){
        return Math.floor(second / 60)+' minute'+((Math.floor(second / 60) !== 1)?'s':'')+' ago';
      }else if(second < (24*60*60)){
        return Math.floor(second / (60*60))+' hour'+((Math.floor(second / (60*60)) !== 1)?'s':'')+' ago';
      }else{
        var dateArrs = new Date(createdTimestamp).toGMTString().split(" ");
        return dateArrs[1]+" "+dateArrs[2];
      }
    },
   
    postMessage = function(emotion,timeOut){
      if(!worker){
        return false;
      }
      if(!emotion){
        worker.postMessage({'isCancel':true});  
        return false;
      }
      var times = [];
      emotionOf[emotion].listNode = $(emotionOf[emotion].id+' > li');
      if(getListNode(emotion).length > 0){
        $.each(emotionOf[emotion].listNode,function(){
          times.push($(this).find('time').data('timestamp'));
        });
      }
      worker.postMessage({'isCancel':false,'times':times,'emotion':emotion,'timeOut':timeOut||10000,'offsetTime':offsetTime});
    },
    
    setImageFileName = function(message){
      message.emotion = message.emotion||'*';
      message.imgFileNm = emotionOf[message.emotion].imgNm;
      return message;
    },
    
    updateEmotionCount = function(message){
      message.emotion = message.emotion||'*';
      emotionOf[message.emotion].cnt += 1;
      $('ul.emotionCnt li > em[data-emotion="'+message.emotion+'"]').html(emotionOf[message.emotion].cnt);
      if(message.emotion !== '*'){
        emotionOf['*'].cnt += 1;
        $('ul.emotionCnt li > em[data-emotion="*"]').html(emotionOf['*'].cnt);  
      }
    },
    
    updateUserCount = function(cnt){
      if(cnt){
        $('ul.emotionCnt li > em[data-emotion="Users"]').html(cnt);  
      }
    },
    
    updateAllUserCount = function(message){
      var messageUserName = message.user.name;
      var messageUserAvatar = message.user.avatar;
      var isNew = true;
      $('div#allUsers li img').each(function(index){
        if($(this).attr('title') === messageUserName){
          isNew = false;
        }
      });
      if(isNew){
        $('div#allUsers ul').append('<li><img src="' + messageUserAvatar + '" title="' + messageUserName + '" height="24" width="24"></li>');
        var allUserCount = $('div#allUsers p span').text();
        $('div#allUsers p span').text(++allUserCount);
      }
    },
    
    currentEmotion = function(){
      return $('ul.tabs li > a.active').data('emotion');
    },
    
    getListNode = function(emotion){
      return emotionOf[emotion].listNode;
    },
    
    loadList = function(emotion){
      var param = {'to':valOf.pId};
      if(emotion !== '*'){
        param.emotion = emotion;
      }
      $.getJSON('/comments/', param, function(data){
        $(emotionOf[emotion].id).empty();
        pageLoadCallBack(data,emotion);
        postMessage(emotion);
        emotionOf[emotion].isLoad = true;
      });
    },

    morePage = function(emotion){
      if($('div#loading:visible').length === 0){
        $('div#loading').fadeIn('fast');
      }else{
        return false;
      }
      if(loading){
        return false;
      }
      loading = true;
      
      var param = {'to':valOf.pId};
      if(emotion !== '*'){
        param.emotion = emotion;
      }

      emotionOf[emotion].pageCnt -= 1;
      param.date = $(emotionOf[emotion].id+' > li:last-child time').data('timestamp');
      
      
      $.getJSON('/comments/', param, function(data){
        $('div#loading').hide();
        pageLoadCallBack(data,emotion,50);
        loading = false;
      });
    },
    pageLoadCallBack = function(data, emotion,timeOut){
      if(data){
        var currentTime = new Date().getTime();
        $.each(data, function(index, message){
          message = setImageFileName(message);
          message.timeString = changeTimeString(currentTime,message.date);
          $(emotionOf[emotion].id).append(compileTempl(message));
        });
        if(emotion === '*' && jQuery.browser.opera){
          $('body').height('auto');
        }
      }
      setWindowScrollEvent(timeOut);
    },
    
    windowFocusEvent = function(){
      postMessage(currentEmotion(),1);
      $(this).unbind('focus');
    },
    
    windowScrollEvent = function(){
      if($(this).scrollTop() >= ($('.footer').position().top)-$(this).height()-50){        
        if(emotionOf[currentEmotion()].pageCnt > 0){
          morePage(currentEmotion());
          $(this).unbind('scroll');
        }
      }
    },
    
    setWindowScrollEvent = function(timeOut){
      setTimeout(function(){
        $(window).scroll(windowScrollEvent);
      },timeOut||500);
    },
    
    updateLog = function(message){
      if(!message){
        return false;
      }
      var message = setImageFileName(message),
          emotion = currentEmotion();
      message.timeString = changeTimeString(new Date().getTime(),message.date);
      updateEmotionCount(message);
      updateAllUserCount(message);
      var newComment = compileTempl(message);
      if(emotion !== '*' && message.emotion !== '*'){
        $(emotionOf['*'].id).prepend(newComment);
      }
      $(emotionOf[message.emotion].id).prepend(newComment);
    };
    
    
    //var socket = new io.Socket(null, {port: valOf.port, rememberTransport:false});
    var socket = io.connect('http://'+document.location.host);
    socket.on('connect',function(){
      socket.emit('entrance',valOf.pId, function(count){
        updateUserCount(count);
      });  
      socket.on('pull log '+valOf.pId, function (data) {
        updateLog(data.msg);
      });
      socket.on('someone is leaving '+valOf.pId, function(count){
        updateUserCount(count);
      });
      socket.on('someone is here '+valOf.pId,function(count){
        updateUserCount(count);
      });
    });
  
    
    $('#send_comment').click(function(){
      if(!valOf.uname) {
        document.location.href = "/";
      }
      var msg = {
            'body'    : $.trim($('#comment').val()),
            'emotion' : currentEmotion(),
            'user'    : {'name': valOf.uname, 'avatar': valOf.avatar}
          };
      if(!msg.body) {
        return false;
      }
      socket.emit('push log', {'channel':valOf.pId, 'msg':msg},function(data){
        updateLog(data.msg);
      });
      $("#comment").val('').focus();
    });
    
   /*
    * input enter event.
    */    
    $('#comment').keydown(function(e){
      if(e.which === 13 || e.which === 10) {
        $('#send_comment').click();
      }
    }).focus();
    
   /*
    * tab click event
    */
    $('ul.tabs li > a').click(function(e){
      e.preventDefault();
      if($(this).hasClass('active')){
        return false;
      }
      $('div#loading').hide();
      $(this).parents('ul').find('li > a.active').removeClass('active').end().end().addClass('active');
      var emotion = $(this).data('emotion');
      $('ul.rt_feedbacks').fadeOut('fast');
      $(emotionOf[emotion].id).show();
      if(!emotionOf[emotion].isLoad){
        loadList(emotion);
      }else{
        postMessage(emotion,1);
      }
      $('#comment').focus();
    });
  
    if (!!window.Worker) {
      worker = new Worker('/javascripts/time-worker.js');      
      worker.onmessage = function(e){
        if(e.data.times.length > 0 && getListNode(e.data.emotion).length > 0){
          $.each(getListNode(e.data.emotion),function(idx){
            $(this).find('time').html(e.data.times[idx]);
          });
        }
        postMessage(currentEmotion());
      };
    }else{
      postMessage = function(emotion,timeOut){
        if(timeoutObject){
          clearTimeout(timeoutObject);  
        }
        if(!emotion){
          return false;
        }
        timeoutObject = setTimeout(function(){
          var now = (new Date().getTime());
          $.each($(emotionOf[emotion].id+' > li'), function(){
            $(this).find('time').html(changeTimeString(now,$(this).find('time').data('timestamp')));
          });
          postMessage(currentEmotion());
        },timeOut||10000);
      };
    }
    
    $(window).focus(windowFocusEvent)
    .blur(function(){
      postMessage();
      $(this).focus(windowFocusEvent);
    });
    /* sync client time for server time. */
    (function(){
      offsetTime -= (new Date().getTime());
    })();

    loadList('*');
    //alert($(window).scroll());
  });
div.container.presentation
  div#titleBar
    a(href="/list?conf=#{conf}", class="button") return -1;
    h4 #{uname}, Let's react to #{title}
  ul.emotionCnt.clearfix
    li.first-child
      em(data-emotion="*") #{allCnt} 
      label All
    li 
      em(data-emotion="Good") #{goodCnt}
      label Good
    li 
      em(data-emotion="!Good") #{ngCnt} 
      label !Good
    li
      em(data-emotion="Ask") #{askCnt} 
      label Ask
    li.last-child
      em(data-emotion="Users") 0
      label Users
  div#allUsers
    p By all 
      span #{allUsersCnt}
      | Users
    ul
      - each u in allUsers
        li 
          - var avatar = u.avatar
          - var name = u.name
          img(src=avatar, title=name, height='24', width='24')
  ul.tabs
    li  
      a(href="/comments/",class="active", data-emotion="*") 
        strong *
    li  
      a(href="/comments/", data-emotion="Good") Good
    li
      a(href="/comments/", data-emotion="!Good") !Good
    li
      a(href="/comments/", data-emotion="Ask") Ask
  - if(!isGuest)
    div(id="input_bar")
      input(id='comment', name='comment',type="text", autocomplete='off')
      button(id='send_comment') .push();
  ul#allList.rt_feedbacks
    li.loading
      strong Loading...
  ul#goodList.rt_feedbacks
    li.loading
      strong Loading...
  ul#ngList.rt_feedbacks
    li.loading
      strong Loading...
  ul#askList.rt_feedbacks
    li.loading
      strong Loading...
  div#loading
    img(src="/images/loading.gif")
  div.footer
    small made by 
      a(href='http://springsprout.org' , target="_blank") springsprout
      &nbsp;&nbsp;
      a(href='/logout', class="logout")
        b logout
