script(src='/socket.io/socket.io.js')
script(src='/javascripts/jquery-1.6.1.min.js')
script(type='text/javascript')
  $(function(){
    if (typeof console === 'undefined' || typeof console.log === 'undefined') {
      window.console = {log : function(msg){}};
    }
    var valOf = {
          uname : '#{username}',
          port  : #{port},
          pId   : '#{p_id}',
          good  : 'Good',
          nG    : '!Good',
          ask   : 'Ask'
        },
        emotionOf = {
          '*'     : {'imgNm':'all' , 'cnt' : #{allCnt},  'skip':0, 'id':'#allList',  listNode:'', 'isLoad':true},
          'Good'  : {'imgNm':'good', 'cnt' : #{goodCnt}, 'skip':0, 'id':'#goodList', listNode:'', 'isLoad':false},
          '!Good' : {'imgNm':'ng' ,  'cnt' : #{ngCnt},   'skip':0, 'id':'#ngList',   listNode:'', 'isLoad':false},
          'Ask'   : {'imgNm':'ask' , 'cnt' : #{askCnt},  'skip':0, 'id':'#askList',  listNode:'', 'isLoad':false}
        },
        worker,sessionId,
        commentBox =  '<li data-emotion="{{emotion}}" > '+
                      '  <div class="emotion"><img width="50px" height="50px" src="/images/{{imgFileNm}}.png"/></div> '+
                      '  <div class="comment-body"> '+
                      '   <p>{{body}}</p> '+
                      '   <small>by <em>{{from}}</em> on <time data-timestamp="{{date}}">{{timeString}}</time></small> '+
                      '  </div> '+
                      '</li>';
    /* Below there are functions */
    var compileTempl = function(data){
      var templ = commentBox;
      $.each(data,function(key,value){
        templ = templ.replace(new RegExp("\\{\\{" + key + "\\}\\}","gi"),value);
      });
      return templ;
    },
    
    changeTimeString = function(now, createdTimestamp){
      var second = Math.round((now-createdTimestamp)/1000);
      if(second <= 5){
        return 'now';
      }else if(second <= 60){
        return second+' seconds ago';
      }else if(second < (60*60)){
        return Math.floor(second / 60)+' minute'+((Math.floor(second / 60) !== 1)?'s':'')+' ago';
      }else if(second < (24*60*60)){
        return Math.floor(second / (60*60))+' hour'+((Math.floor(second / (60*60)) !== 1)?'s':'')+' ago';
      }else{
        var dateArrs = new Date(createdTimestamp).toGMTString().split(" ");
        return dateArrs[1]+" "+dateArrs[2];
      }
    },
   
    postMessage = function(emotion,timeOut){
      if(!worker){
        return false;
      }
      if(!emotion){
        worker.postMessage({'isCancel':true});  
        return false;
      }
      var times = [];
      emotionOf[emotion].listNode = $(emotionOf[emotion].id+' > li');
      if(getListNode(emotion).length > 0){
        $.each(emotionOf[emotion].listNode,function(){
          times.push($(this).find('time').data('timestamp'));
        });
      }
      console.log({'isCancel':false,'times':times,'emotion':emotion,'timeOut':timeOut||10000});
      worker.postMessage({'isCancel':false,'times':times,'emotion':emotion,'timeOut':timeOut||10000});
    },
    
    setImageFileName = function(message){
      message.emotion = message.emotion||'*';
      message.imgFileNm = emotionOf[message.emotion].imgNm;
      return message;
    },
    
    updateEmotionCount = function(message){
      message.emotion = message.emotion||'*';
      emotionOf[message.emotion].cnt += 1;
      $('ul.emotionCnt li > em[data-emotion="'+message.emotion+'"]').html(emotionOf[message.emotion].cnt);
      if(message.emotion !== '*'){
        emotionOf['*'].cnt += 1;
        $('ul.emotionCnt li > em[data-emotion="*"]').html(emotionOf['*'].cnt);  
      }
    },
    
    updateUserCount = function(cnt){
      if(cnt){
        $('ul.emotionCnt li > em[data-emotion="Users"]').html(cnt);  
      }
    },
    
    currentEmotion = function(){
      return $('ul.tabs li > a.active').data('emotion');
    },
    
    getListNode = function(emotion){
      return emotionOf[emotion].listNode;
    },
    
    loadList = function(emotion){
      var param = {'to':valOf.pId};
      if(emotion !== '*'){
        param.emotion = emotion;
      }
      $.getJSON('/comments/', param, function(data){
        $(emotionOf[emotion].id).empty();
        var currentTime = new Date().getTime();
        $.each(data, function(index, message){
          message = setImageFileName(message);
          message.timeString = changeTimeString(currentTime,message.date);
          $(emotionOf[emotion].id).append(compileTempl(message));
        });
        emotionOf[emotion].isLoad = true;
        postMessage(emotion);
      });

    },
    
    windowFocusEvent = function(){
      postMessage(currentEmotion());
      $(this).unbind('focus');
    };
    
    var socket = new io.Socket(null, {port: valOf.port, rememberTransport:false});
    
    socket.connect();
    socket.send({'type':'subscribe', 'channel':valOf.pId});
    socket.on('reconnect',function(){
      socket.send({'type':'subscribe', 'channel':valOf.pId,'sessionId':sessionId});
    });
    socket.on('message', function(obj){
      if(typeof obj === 'string'){
        return false;
      }
      updateUserCount(obj.userCnt);
      if(obj.checked){
        sessionId = obj.sessionId;
        return false;
      }
      //exception of duplication push.
      if(sessionId !== obj.sessionId){
        return false;
      }
      var message = setImageFileName(obj.msg),
          emotion = currentEmotion();
      message.timeString = changeTimeString(new Date().getTime(),message.date);
      updateEmotionCount(message);
      var newComment = compileTempl(message);
      if(emotion !== '*' && message.emotion !== '*'){
        $(emotionOf['*'].id).prepend(newComment);
      }
      $(emotionOf[message.emotion].id).prepend(newComment);
    });
    
    $('#send_comment').click(function(){
      if(!valOf.uname) {
        document.location.href = "/";
      }
      var msg = {
            'body'    : $.trim($('#comment').val()),
            'emotion' : currentEmotion(),
            'from'    : valOf.uname
          };
      if(!msg.body) {
        return false;
      }

      socket.send({'type':'publish', 'channel':valOf.pId, 'msg':msg});
      $("#comment").val('').focus();
    });
    
   /*
    * input enter event.
    */    
    $('#comment').keydown(function(e){
      if(e.which === 13 || e.which === 10) {
        $('#send_comment').click();
      }
    }).focus();
    
   /*
    * tab click event
    */
    $('ul.tabs li > a').click(function(e){
      e.preventDefault();
      if($(this).hasClass('active')){
        return false;
      }
      $(this).parents('ul').find('li > a.active').removeClass('active').end().end().addClass('active');
      var emotion = $(this).data('emotion');
      $('ul.rt_feedbacks').fadeOut('fast');
      $(emotionOf[emotion].id).show();
      if(!emotionOf[emotion].isLoad){
        loadList(emotion);
      }else{
        postMessage(emotion,1);
      }
      $('#comment').focus();
    });
  
    if (!!window.Worker) {
      worker = new Worker('/javascripts/time-worker.js');      
      worker.onmessage = function(e){
        if(e.data.times.length > 0 && getListNode(e.data.emotion).length > 0){
          $.each(getListNode(e.data.emotion),function(idx){
            $(this).find('time').html(e.data.times[idx]);
          });
        }
        postMessage(e.data.emotion);
      };
    }
    
  /*
    $(window).scroll(function(){
      if($(window).scrollTop() == $(document).height() - $(window).height()){
        if(emotionOf[currentEmotion()].cnt > 25){
          //console.log('event!!');
        }
      }
    });
  */
    $(window).focus(windowFocusEvent)
    .blur(function(){
      postMessage();
      $(this).focus(windowFocusEvent);
    });
    
    loadList('*');
  });

div.container.presentation
  div#titleBar
    a(href="/list", class="button") return -1;
    h4 #{username}, Let's react to #{title}
  ul.emotionCnt.clearfix
    li 
      em(data-emotion="*") #{allCnt} 
      label All
    li 
      em(data-emotion="Good") #{goodCnt}
      label Good
    li 
      em(data-emotion="!Good") #{ngCnt} 
      label !Good
    li
      em(data-emotion="Ask") #{askCnt} 
      label Ask
    li.last-child
      em(data-emotion="Users") #{userCnt}
      label Users
  ul.tabs
    li  
      a(href="/comments/",class="active", data-emotion="*") 
        strong *
    li  
      a(href="/comments/", data-emotion="Good") Good
    li
      a(href="/comments/", data-emotion="!Good") !Good
    li
      a(href="/comments/", data-emotion="Ask") Ask
  div(id="input_bar")
    input(id='comment', name='comment',type="text", autocomplete='off')
    button(id='send_comment') .push();
  ul#allList.rt_feedbacks
    li.loading
      strong Loading...
  ul#goodList.rt_feedbacks
    li.loading
      strong Loading...
  ul#ngList.rt_feedbacks
    li.loading
      strong Loading...
  ul#askList.rt_feedbacks
    li.loading
      strong Loading...
  div.footer
    small made by 
      a(href='http://springsprout.org' , target="_blank") springsprout